#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_ITERATIONS 1000000

long long counter = 0;
pthread_mutex_t counter_mutex = PTHREAD_MUTEX_INITIALIZER;

void* increment_counter(void* arg) {
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        if (pthread_mutex_lock(&counter_mutex) != 0) {
            perror("Error al bloquear el mutex");
            exit(EXIT_FAILURE);
        }
        counter++;
        if (pthread_mutex_unlock(&counter_mutex) != 0) {
            perror("Error al desbloquear el mutex");
            exit(EXIT_FAILURE);
        }
    }
    return NULL;
}

int main() {
    pthread_t thread1, thread2;

    if (pthread_create(&thread1, NULL, increment_counter, NULL) != 0) {
        perror("Error al crear el thread1");
        exit(EXIT_FAILURE);
    }
    if (pthread_create(&thread2, NULL, increment_counter, NULL) != 0) {
        perror("Error al crear el thread2");
        exit(EXIT_FAILURE);
    }

    if (pthread_join(thread1, NULL) != 0) {
        perror("Error al esperar por el thread1");
        exit(EXIT_FAILURE);
    }
    if (pthread_join(thread2, NULL) != 0) {
        perror("Error al esperar por el thread2");
        exit(EXIT_FAILURE);
    }

    printf("Expected counter value: %lld\n", 2LL * NUM_ITERATIONS);
    printf("Actual counter value: %lld\n", counter);

    if (pthread_mutex_destroy(&counter_mutex) != 0) {
        perror("Error al destruir el mutex");
        exit(EXIT_FAILURE);
    }
    return 0;
}
